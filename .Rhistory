saveRDS(all_data, file = "all_data.rds")
all_data <- readRDS("~/Task/all_data.rds")
# Load required libraries
library(dplyr)  # For data manipulation
library(purrr)  # For functional programming (map functions)
cleanse_data <- function(data) {
data <- data %>%
mutate(across(everything(), ~ if (all(grepl("^[0-9.]+$", .))) as.double(.) else as.character(.)))
return(data)
}
# Apply the cleansing function to each dataset in the list
cleaned_data <- map(all_data, cleanse_data)
View(cleaned_data)
test <- bind_rows(all_data)
View(all_data)
all_data[[5]][["Start-up maximum budget available"]]
# Load required libraries
library(dplyr)  # For data manipulation
library(purrr)  # For functional programming (map functions)
library(stringr) # For string manipulation
# Assume `all_data` is in the global environment
# Function to cleanse a single dataset
cleanse_data <- function(data) {
data <- data %>%
mutate(across(everything(), ~ {
# Replace 'n/a' variations with NA
. <- str_replace_all(., regex("(?i)n/a"), NA_character_)
# Remove symbols like £ and commas
. <- str_replace_all(., "[£,]", "")
# Convert to double if numeric
if (all(grepl("^[0-9.]+$", ., na.rm = TRUE))) {
return(as.double(.))
} else {
return(as.character(.))
}
}))
return(data)
}
# Apply the cleansing function to each dataset in the list
cleaned_data <- map(all_data, cleanse_data)
# Apply the cleansing function to each dataset in the list
cleaned_data <- map(all_data, cleanse_data)
View(cleaned_data)
# 2-data-cleansing.R
# Load required libraries
library(dplyr)  # For data manipulation
library(purrr)  # For functional programming (map functions)
library(stringr) # For string manipulation
# Assume `all_data` is in the global environment
# Function to cleanse a single dataset
cleanse_data <- function(data) {
data <- data %>%
mutate(across(everything(), ~ {
# Replace 'n/a' variations with NA
. <- str_replace_all(., regex("(?i)n/a"), NA_character_)
# Remove symbols like £ and commas
. <- str_replace_all(., "[£,]", "")
# Convert to double if numeric
if (all(grepl("^[0-9.]+$", ., na.rm = TRUE))) {
return(as.double(.))
} else {
return(as.character(.))
}
}))
return(data)
}
# Apply the cleansing function to each dataset in the list
cleaned_data <- map(all_data, cleanse_data)
View(all_data)
View(cleaned_data)
cleaned_data[[2]][["Reason for budget set...7"]]
View(all_data)
# Load required libraries
library(dplyr)  # For data manipulation
library(purrr)  # For functional programming (map functions)
library(stringr) # For string manipulation
# Assume `all_data` is in the global environment
# Function to cleanse a single dataset
cleanse_data <- function(data) {
data <- data %>%
mutate(across(everything(), ~ {
# Replace 'n/a' variations with NA and then convert to NA in R
. <- str_replace_all(., regex("(?i)n/a"), "")
. <- na_if(., "")
# Remove symbols like £ and commas
. <- str_replace_all(., "[£,]", "")
# Convert to double if numeric and round to nearest pound
if (all(grepl("^[0-9.]+$", .), na.rm = TRUE)) {
# Convert to double and round to nearest pound
return(as.double(round(as.numeric(.), 0)))
} else {
return(as.character(.))
}
}))
return(data)
}
# Apply the cleansing function to each dataset in the list
cleaned_data <- map(all_data, cleanse_data)
View(cleaned_data)
# Load required libraries
library(dplyr)  # For data manipulation
library(purrr)  # For functional programming (map functions)
library(stringr) # For string manipulation
# Assume `all_data` is in the global environment
# Function to cleanse a single dataset
cleanse_data <- function(data) {
data <- data %>%
mutate(across(everything(), ~ {
# Replace 'n/a' variations with NA and then convert to NA in R
. <- str_replace_all(., regex("(?i)n/a"), "")
. <- na_if(., "")
# Remove symbols like £ and commas
. <- str_replace_all(., "[£,]", "")
# Convert to double if numeric and round to nearest pound
if (all(grepl("^[0-9.]+$", .), na.rm = TRUE)) {
# Convert to double and round to nearest pound
return(as.double(round(as.numeric(.), 0)))
} else {
return(as.character(.))
}
}))
return(data)
}
# Apply the cleansing function to each dataset in the list
cleaned_data <- map(all_data, cleanse_data)
View(cleaned_data)
cleaned_data[[4]][["Other costs spend"]]
cleaned_data[[4]][["Remaining office budget"]]
# Load required libraries
library(dplyr)  # For data manipulation
library(purrr)  # For functional programming (map functions)
library(stringr) # For string manipulation
# Assume `all_data` is in the global environment
# Function to cleanse a single dataset
cleanse_data <- function(data) {
data <- data %>%
mutate(across(everything(), ~ {
# Replace 'n/a' variations with NA and then convert to NA in R
. <- str_replace_all(., regex("(?i)n/a"), "")
. <- na_if(., "")
# Remove symbols like £ and commas
. <- str_replace_all(., "[£,""'']", "")
View(cleaned_data)
cleaned_data[[7]][["Reason for budget set...12"]]
# Load required libraries
library(dplyr)  # For data manipulation
library(purrr)  # For functional programming (map functions)
library(stringr) # For string manipulation
# Assume `all_data` is in the global environment
# Function to cleanse a single dataset
cleanse_data <- function(data) {
data <- data %>%
mutate(across(everything(), ~ {
# Replace 'n/a' variations with NA and then convert to NA in R
. <- str_replace_all(., regex("(?i)n/a"), "")
. <- na_if(., "")
# Remove symbols like £ and commas
. <- str_replace_all(., "[£,]", "")
# Remove quotes and convert to double if numeric and round to nearest pound
. <- str_replace_all(., "['\"]", "")
# Convert to double if numeric and round to nearest pound
if (all(grepl("^[0-9.]+$", .), na.rm = TRUE)) {
# Convert to double and round to nearest pound
return(as.double(round(as.numeric(.), 0)))
} else {
return(as.character(.))
}
}))
return(data)
}
# Apply the cleansing function to each dataset in the list
cleaned_data <- map(all_data, cleanse_data)
View(cleaned_data)
cleaned_data[[6]][["Remaining accommodation budget"]]
# 2-data-cleansing.R
# Load required libraries
library(dplyr)  # For data manipulation
library(purrr)  # For functional programming (map functions)
library(stringr) # For string manipulation
# Assume `all_data` is in the global environment
# Function to cleanse a single dataset
cleanse_data <- function(data) {
data <- data %>%
mutate(across(everything(), ~ {
# Replace 'n/a' variations with NA
. <- str_replace_all(., regex("(?i)n/a"), "")
. <- na_if(., "")
# Remove symbols like £ and commas
. <- str_replace_all(., "[£,]", "")
# Remove quotes
. <- str_replace_all(., "['\"]", "")
# Convert to double if numeric and round to nearest pound
if (all(grepl("^[0-9.]+$", .), na.rm = TRUE)) {
# Convert to double and round to nearest pound
numeric_val <- suppressWarnings(as.numeric(.))
if (!is.na(numeric_val)) {
return(as.double(round(numeric_val, 0)))
} else {
return(NA_real_)
}
} else {
return(as.character(.))
}
}))
return(data)
}
# Apply the cleansing function to each dataset in the list
cleaned_data <- map(all_data, cleanse_data)
# 2-data-cleansing.R
# Load required libraries
library(dplyr)  # For data manipulation
library(purrr)  # For functional programming (map functions)
library(stringr) # For string manipulation
# Assume `all_data` is in the global environment
# Function to cleanse a single dataset
cleanse_data <- function(data) {
data <- data %>%
mutate(across(everything(), ~ {
# Replace 'n/a' variations with NA
. <- str_replace_all(., regex("(?i)n/a"), "")
. <- na_if(., "")
# Remove symbols like £ and commas
. <- str_replace_all(., "[£,]", "")
# Remove quotes
. <- str_replace_all(., "['\"]", "")
# Convert to double if numeric and round to nearest pound
if_else(
grepl("^[0-9.]+$", ., na.rm = TRUE),
as.double(round(as.numeric(.), 0)),
as.character(.)
)
}))
return(data)
}
# Apply the cleansing function to each dataset in the list
cleaned_data <- map(all_data, cleanse_data)
# Load required libraries
library(dplyr)  # For data manipulation
library(purrr)  # For functional programming (map functions)
library(stringr) # For string manipulation
# Assume `all_data` is in the global environment
# Function to cleanse a single dataset
cleanse_data <- function(data) {
data <- data %>%
mutate(across(everything(), ~ {
# Replace 'n/a' variations with NA
. <- str_replace_all(., regex("(?i)n/a"), "")
. <- na_if(., "")
# Remove symbols like £ and commas
. <- str_replace_all(., "[£,]", "")
# Remove quotes
. <- str_replace_all(., "['\"]", "")
# Check if the column can be converted to numeric
numeric_val <- suppressWarnings(as.numeric(.))
# Convert to double if numeric and round to nearest pound
if_else(!is.na(numeric_val), as.double(round(numeric_val, 0)), as.character(.))
}))
return(data)
}
# Apply the cleansing function to each dataset in the list
cleaned_data <- map(all_data, cleanse_data)
# 2-data-cleansing.R
# Load required libraries
library(dplyr)  # For data manipulation
library(purrr)  # For functional programming (map functions)
library(stringr) # For string manipulation
# Assume `all_data` is in the global environment
# Function to cleanse a single dataset
cleanse_data <- function(data) {
data <- data %>%
mutate(across(everything(), ~ {
# Replace 'n/a' variations with NA
. <- str_replace_all(., regex("(?i)n/a"), "")
. <- na_if(., "")
# Remove symbols like £ and commas
. <- str_replace_all(., "[£,]", "")
# Remove quotes
. <- str_replace_all(., "['\"]", "")
.
})) %>%
mutate(across(where(~ all(grepl("^[0-9.]+$", ., na.rm = TRUE))), ~ {
numeric_val <- suppressWarnings(as.numeric(.))
as.double(round(numeric_val, 0))
}))
return(data)
}
# Apply the cleansing function to each dataset in the list
cleaned_data <- map(all_data, cleanse_data)
# 2-data-cleansing.R
# Load required libraries
library(dplyr)  # For data manipulation
library(purrr)  # For functional programming (map functions)
library(stringr) # For string manipulation
# Assume `all_data` is in the global environment
# Function to cleanse a single dataset
cleanse_data <- function(data) {
data <- data %>%
mutate(across(everything(), ~ {
# Replace 'n/a' variations with NA
. <- str_replace_all(., regex("(?i)n/a"), "")
. <- na_if(., "")
# Remove symbols like £ and commas
. <- str_replace_all(., "[£,]", "")
# Remove quotes
. <- str_replace_all(., "['\"]", "")
.
})) %>%
mutate(across(where(~ all(grepl("^[0-9.]+$", .))), ~ {
numeric_val <- suppressWarnings(as.numeric(.))
as.double(round(numeric_val, 0))
}))
return(data)
}
# Apply the cleansing function to each dataset in the list
cleaned_data <- map(all_data, cleanse_data)
View(cleaned_data)
cleaned_data[[5]][["Accommodation spend"]]
cleaned_data[[5]][["Remaining accommodation budget"]]
cleaned_data[[6]][["Remaining staffing budget"]]
# Load required libraries
library(dplyr)  # For data manipulation
library(purrr)  # For functional programming (map functions)
library(stringr) # For string manipulation
# Assume `all_data` is in the global environment
# Function to cleanse a single dataset
cleanse_data <- function(data) {
data <- data %>%
mutate(across(everything(), ~ {
# Replace 'n/a' variations with NA
. <- str_replace_all(., regex("(?i)n/a"), "")
. <- na_if(., "")
# Remove symbols like £ and commas
. <- str_replace_all(., "[£,]", "")
# Remove quotes
. <- str_replace_all(., "['\"]", "")
# Convert to numeric if possible, round, otherwise keep as character
numeric_val <- suppressWarnings(as.numeric(.))
if_else(!is.na(numeric_val), as.double(round(numeric_val, 0)), .)
}))
return(data)
}
# Apply the cleansing function to each dataset in the list
cleaned_data <- map(all_data, cleanse_data)
# 2-data-cleansing.R
# Load required libraries
library(dplyr)  # For data manipulation
library(purrr)  # For functional programming (map functions)
library(stringr) # For string manipulation
# Assume `all_data` is in the global environment
# Function to cleanse a single dataset
cleanse_data <- function(data) {
data <- data %>%
mutate(across(everything(), ~ {
# Replace 'n/a' variations with NA
. <- str_replace_all(., regex("(?i)n/a"), "")
. <- na_if(., "")
# Remove symbols like £ and commas
. <- str_replace_all(., "[£,]", "")
# Remove quotes
. <- str_replace_all(., "['\"]", "")
.
})) %>%
mutate(across(where(is.character), ~ {
numeric_val <- suppressWarnings(as.numeric(.))
if (!any(is.na(numeric_val))) {
as.double(round(numeric_val, 0))
} else {
.
}
}))
return(data)
}
# Apply the cleansing function to each dataset in the list
cleaned_data <- map(all_data, cleanse_data)
View(cleaned_data)
View(cleaned_data)
source("~/Task/1 - Importing-Data.R")
# 2-data-cleansing.R
# Load required libraries
library(dplyr)  # For data manipulation
library(purrr)  # For functional programming (map functions)
library(stringr) # For string manipulation
# Assume `all_data` is in the global environment
# Function to cleanse a single dataset
cleanse_data <- function(data) {
data <- data %>%
mutate(across(everything(), ~ {
# Replace 'n/a' variations with NA
. <- str_replace_all(., regex("(?i)n/a"), "")
. <- na_if(., "")
# Remove symbols like £ and commas
. <- str_replace_all(., "[£,]", "")
# Remove quotes
. <- str_replace_all(., "['\"]", "")
.
})) %>%
mutate(across(where(is.character), ~ {
numeric_val <- suppressWarnings(as.numeric(.))
if (!any(is.na(numeric_val))) {
as.double(round(numeric_val, 0))
} else {
.
}
}))
return(data)
}
# Apply the cleansing function to each dataset in the list
cleaned_data <- map(all_data, cleanse_data)
View(cleaned_data)
# Load required libraries
library(dplyr)  # For data manipulation
library(readr)  # For reading CSV files
library(purrr)  # For functional programming (map functions)
# Initialise variables
start_year <- 10
end_year <- 11
all_data <- list()
# Function to construct the URL
construct_url <- function(start_year, end_year) {
paste0("https://www.theipsa.org.uk/api/download?type=totalSpend&year=",
sprintf("%02d_%02d", start_year, end_year))
}
# Loop to read datasets
while (TRUE) {
url <- construct_url(start_year, end_year)
cat("Attempting to read data from:", url, "\n")
# Try to read the CSV file
tryCatch({
year_label <- paste0("20", sprintf("%02d/%02d", start_year, end_year))
data <- read_csv(url)
# Add a new column with the year information
data <- data %>%
mutate(Year = year_label)
# Store the data in the list
all_data[[length(all_data) + 1]] <- data
cat("Successfully read data for year:", start_year, "/", end_year, "\n")
# Move to the next year
start_year <- start_year + 1
end_year <- end_year + 1
}, error = function(e) {
cat("No data found for year:", start_year, "/", end_year, "- stopping.\n")
break
})
}
# Load required libraries
library(dplyr)  # For data manipulation
library(readr)  # For reading CSV files
library(purrr)  # For functional programming (map functions)
# Initialise variables
start_year <- 10
end_year <- 11
all_data <- list()
# Function to construct the URL
construct_url <- function(start_year, end_year) {
paste0("https://www.theipsa.org.uk/api/download?type=totalSpend&year=",
sprintf("%02d_%02d", start_year, end_year))
}
# Loop to read datasets
while (TRUE) {
url <- construct_url(start_year, end_year)
cat("Attempting to read data from:", url, "\n")
# Try to read the CSV file
tryCatch({
year_label <- paste0("20", sprintf("%02d/%02d", start_year, end_year))
data <- read_csv(url)
# Add a new column with the year information
data <- data %>%
mutate(Year = year_label)
# Store the data in the list
all_data[[length(all_data) + 1]] <- data
cat("Successfully read data for year:", start_year, "/", end_year, "\n")
# Move to the next year
start_year <- start_year + 1
end_year <- end_year + 1
}, error = function(e) {
cat("No data found for year:", start_year, "/", end_year, "- stopping.\n")
break
})
}
# 2-data-cleansing.R
# Load required libraries
library(dplyr)  # For data manipulation
library(purrr)  # For functional programming (map functions)
library(stringr) # For string manipulation
# Assume `all_data` is in the global environment
# Function to cleanse a single dataset
cleanse_data <- function(data) {
data <- data %>%
mutate(across(everything(), ~ {
# Replace 'n/a' variations with NA
. <- str_replace_all(., regex("(?i)n/a"), "")
. <- na_if(., "")
# Remove symbols like £ and commas
. <- str_replace_all(., "[£,]", "")
# Remove quotes
. <- str_replace_all(., "['\"]", "")
.
})) %>%
mutate(across(where(is.character), ~ {
numeric_val <- suppressWarnings(as.numeric(.))
if (!any(is.na(numeric_val))) {
as.double(round(numeric_val, 0))
} else {
.
}
}))
return(data)
}
# Apply the cleansing function to each dataset in the list
cleaned_data <- map(all_data, cleanse_data)
View(cleaned_data)
cleaned_data[[4]][["Remaining staffing budget"]]
